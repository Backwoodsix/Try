-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")

-- Player setup
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

if not Character.PrimaryPart then
    Character.PrimaryPart = HumanoidRootPart
end

-- Flying variables
FLYING = false
local flySpeed = 200
local velocityHandlerName = "VelocityHandler"
local gyroHandlerName = "GyroHandler"
local currentSeat = nil
local currentWeld = nil
local mfly1, mfly2 = nil, nil

-- Utility: check if a model has unanchored parts
local function isUnanchored(model)
    for _, p in pairs(model:GetDescendants()) do
        if p:IsA("BasePart") and not p.Anchored then
            return true
        end
    end
    return false
end

-- Find nearest unanchored Chair within 300 studs of TeslaLab generator
local function findNearestValidChair()
    local runtimeFolder = Workspace:FindFirstChild("RuntimeItems")
    if not runtimeFolder then return nil end

    local targetCFrame = Workspace.TeslaLab.Generator.Generator.CFrame
    local origin = targetCFrame.Position
    local closest, shortest = nil, math.huge

    for _, item in pairs(runtimeFolder:GetChildren()) do
        if item:IsA("Model") and item.Name == "Chair" and isUnanchored(item) then
            local seat = item:FindFirstChildWhichIsA("Seat", true)
            if seat and not seat.Occupant then
                local dist = (origin - seat.Position).Magnitude
                if dist <= 300 and dist < shortest then
                    closest = seat
                    shortest = dist
                end
            end
        end
    end
    return closest
end

-- Disable collisions for character and chair model
local function disableCollisionsRecursive(obj)
    for _, part in pairs(obj:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end

-- Sit and weld to a given Seat
local function sitAndWeldToSeat(seat)
    if not seat or not seat:IsA("Seat") then return end
    currentSeat = seat
    -- Move player to seat
    HumanoidRootPart.CFrame = seat.CFrame * CFrame.new(0, 2, 0)
    wait(0.2)
    seat:Sit(Humanoid)

    -- Wait for sync
    for i = 1, 30 do
        if Humanoid.SeatPart == seat then break end
        wait(0.1)
    end

    -- Weld
    local weld = Instance.new("WeldConstraint")
    weld.Name = "TempWeld"
    weld.Part0 = HumanoidRootPart
    weld.Part1 = seat
    weld.Parent = HumanoidRootPart
    currentWeld = weld

    -- Disable collisions
    disableCollisionsRecursive(Character)
    disableCollisionsRecursive(seat.Parent)
end

-- Enable flying while seated
local function enableFlying()
    if FLYING then return end
    FLYING = true
    local camera = Workspace.CurrentCamera
    local controlModule = require(LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))

    local bv = Instance.new("BodyVelocity")
    bv.Name = velocityHandlerName
    bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    bv.Velocity = Vector3.new()
    bv.Parent = HumanoidRootPart

    local bg = Instance.new("BodyGyro")
    bg.Name = gyroHandlerName
    bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bg.P = 1000
    bg.D = 50
    bg.Parent = HumanoidRootPart

    mfly1 = RunService.RenderStepped:Connect(function()
        if FLYING then
            local dir = controlModule:GetMoveVector()
            bv.Velocity = (camera.CFrame.RightVector * dir.X + -camera.CFrame.LookVector * dir.Z) * flySpeed
            bg.CFrame = camera.CFrame
        end
    end)
end

-- Disable flying, unweld, and unseat
local function disableFlying()
    if not FLYING then return end
    FLYING = false
    local root = HumanoidRootPart
    -- Remove BodyVelocity and BodyGyro
    if root:FindFirstChild(velocityHandlerName) then
        root:FindFirstChild(velocityHandlerName):Destroy()
    end
    if root:FindFirstChild(gyroHandlerName) then
        root:FindFirstChild(gyroHandlerName):Destroy()
    end
    -- Disconnect fly loop
    if mfly1 then
        mfly1:Disconnect()
        mfly1 = nil
    end
    -- Destroy weld and stand up
    if currentWeld and currentWeld.Parent then
        currentWeld:Destroy()
        currentWeld = nil
    end
    if Humanoid.SeatPart then
        Humanoid.Sit = false
    end
end

-- GUI Creation
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FlyGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local flyButton = Instance.new("TextButton")
flyButton.Name = "FlyButton"
flyButton.Size = UDim2.new(0, 120, 0, 40)
flyButton.Position = UDim2.new(0, 20, 0, 20)
flyButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
flyButton.Text = "Find Chair & Fly"
flyButton.Font = Enum.Font.SourceSansBold
flyButton.TextSize = 18
flyButton.Parent = screenGui

local unflyButton = Instance.new("TextButton")
unflyButton.Name = "UnflyButton"
unflyButton.Size = UDim2.new(0, 120, 0, 40)
unflyButton.Position = UDim2.new(0, 20, 0, 70)
unflyButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
unflyButton.Text = "Unfly"
unflyButton.Font = Enum.Font.SourceSansBold
unflyButton.TextSize = 18
unflyButton.Parent = screenGui

-- Button Logic
flyButton.MouseButton1Click:Connect(function()
    if FLYING then return end
    -- Find and sit on chair
    local seat = findNearestValidChair()
    if seat then
        sitAndWeldToSeat(seat)
        enableFlying()
    else
        warn("No valid Chair found.")
    end
end)

unflyButton.MouseButton1Click:Connect(function()
    disableFlying()
end)
